#compdef terraform

local -a _terraform_cmds
_terraform_cmds=(
    'apply:Builds or changes infrastructure'
    'destroy:Destroy Terraform-managed infrastructure'
    'get:Download and install modules for the configuration'
    'graph:Create a visual graph of Terraform resources'
    'init:Initializes Terraform configuration from a module'
    'output:Read an output from a state file'
    'plan:Generate and show an execution plan'
    'push:Upload this Terraform module to Atlas to run'
    'refresh:Update local state file against real resources'
    'remote:Configure remote state storage'
    'show:Inspect Terraform state or plan'
    'taint:Manually mark a resource for recreation'
    'validate:Validates the Terraform files'
    'version:Prints the Terraform version'
)

__apply() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-no-color[If specified, output will not contain any color.]' \
        '-parallelism=[(n) Limit the number of concurrent operations. Defaults to 10.]' \
        '-refresh=[(true) Update state prior to checking for differences. This has no effect if a plan file is given to apply.]' \
        '-state=[(path) Path to read and save state (unless state-out is specified). Defaults to "terraform.tfstate".]' \
        '-state-out=[(path) Path to write state to that is different than "-state". This can be used to preserve the old state.]' \
        '-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(path) Set variables in the Terraform configuration from a file. If "terraform.tfvars" is present, it will be automatically loaded if this flag is not specified.]'
}

__destroy() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-force[Do not ask for input for destroy confirmation.]' \
        '-no-color[If specified, output will not contain any color.]' \
        '-parallelism=[(n) Limit the number of concurrent operations.  Defaults to 10.]' \
        '-refresh=[(true) Update state prior to checking for differences. This has no effect if a plan file is given to apply.]' \
        '-state=[Path to read and save state (unless state-out is specified). Defaults to "terraform.tfstate".]' \
        '-state-out=[Path to write state to that is different than "-state". This can be used to preserve the old state.]' \
        '-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(path) Set variables in the Terraform configuration from a file. If "terraform.tfvars" is present, it will be automatically loaded if this flag is not specified.]'
}

__get() {
    _arguments \
        '-update=[(false) If true, modules already downloaded will be checked for updates and updated if necessary.]'
        '-no-color[If specified, output will not contain any color.]' \
}

__graph() {
    _arguments \
        '-module-depth=[(n) The maximum depth to expand modules. By default this is -1, which will expand all modules.]'
        '-verbose[Generate a verbose, "worst-case" graph, with all nodes for potential operations in place.]' \
        '-no-color[If specified, output will not contain any color.]' \
}

__init() {
    _arguments \
        '-backend=[(atlas) Specifies the type of remote backend. If not specified, local storage will be used.]' \
        '-backend-config=[("k=v") Specifies configuration for the remote storage backend. This can be specified multiple times.]' \
        '-no-color[If specified, output will not contain any color.]' \
}

__output() {
    _arguments \
        '-state=[(path) Path to the state file to read. Defaults to "terraform.tfstate".]'
        '-no-color[If specified, output will not contain any color.]' \
        '-module=[(name) If specified, returns the outputs for a specific module]'
}

__plan() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with" .backup" extension. Set to "-" to disable backup.]' \
        '-destroy[If set, a plan will be generated to destroy all resources managed by the given configuration and state.]' \
        '-detailed-exitcode[Return detailed exit codes when the command exits. This will change the meaning of exit codes to: 0 - Succeeded, diff is empty (no changes), 1 - Errored, 2 - Succeeded, there is a diff]' \

        '-input=[(true) Ask for input for variables if not directly set.]' \
        '-module-depth=[(n) Specifies the depth of modules to show in the output. This does not affect the plan itself, only the output shown. By default, this is -1, which will expand all.]' \
        '-no-color[If specified, output will not contain any color.]' \
        '-out=[(path) Write a plan file to the given path. This can be used as input to the "apply" command.]' \
        '-parallelism=[(n) Limit the number of concurrent operations.  Defaults to 10.]' \
        '-refresh=[(true) Update state prior to checking for differences.]' \
        '-state=[(statefile) Path to a Terraform state file to use to look up Terraform-managed resources. By default it will use the state "terraform.tfstate" if it exists.]' \
        '-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(path) Set variables in the Terraform configuration from a file. If "terraform.tfvars" is present, it will be automatically loaded if this flag is not specified.]'
}

__push() {
    _arguments \
        '-atlas-address=[(url) An alternate address to an Atlas instance. Defaults to https://atlas.hashicorp.com]' \
        '-upload-modules=[(true) If true (default), then the modules are locked at their current checkout and uploaded completely. This prevents Atlas from running "terraform get".]' \
        '-name=[(name) Name of the configuration in Atlas. This can also be set in the configuration itself. Format is typically: "username/name".]' \
        '-token=[(token) Access token to use to upload. If blank or unspecified, the ATLAS_TOKEN environmental variable will be used.]' \
        '-overwrite=[(foo) Variable keys that should overwrite values in Atlas. Otherwise, variables already set in Atlas will overwrite local values. This flag can be repeated.'] \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(path) Set variables in the Terraform configuration from a file. If "terraform.tfvars" is present, it will be automatically loaded if this flag is not specified.]' \
        '-vcs=[(true) If true (default), push will upload only files committed to your VCS, if detected.]' \
        '-no-color[If specified, output will not contain any color.]' \
}


__refresh() {
    _arguments \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-input=[(true)  Ask for input for variables if not directly set.]' \
        '-no-color[If specified, output will not contain any color.]' \
        '-state=[(path) Path to read and save state (unless state-out is specified). Defaults to "terraform.tfstate".]' \
        '-state-out=[(path) Path to write state to that is different than "-state". This can be used to preserve the old state.]' \
        '-target=[(resource) Resource to target. Operation will be limited to this resource and its dependencies. This flag can be used multiple times.]' \
        '-var[("foo=bar") Set a variable in the Terraform configuration. This flag can be set multiple times.]' \
        '-var-file=[(path) Set variables in the Terraform configuration from a file. If "terraform.tfvars" is present, it will be automatically loaded if this flag is not specified.]'
}

__taint() {
    _arguments \
        '-allow-missing[If specified, the command will succeed (exit code 0) even if the resource is missing.]' \
        '-backup=[(path) Path to backup the existing state file before modifying. Defaults to the "-state-out" path with ".backup" extension. Set to "-" to disable backup.]' \
        '-module=[(path)  The module path where the resource lives. By default this will be root. Child modules can be specified by names. Ex. "consul" or "consul.vpc" (nested modules).]' \
        '-no-color[If specified, output will not contain any color.]' \
        '-state=[(path) Path to read and save state (unless state-out is  specified). Defaults to "terraform.tfstate".]' \
        '-state-out=[(path) Path to write updated state file. By default, the "-state" path will be used.]'
}

__remote() {
    _remote_cmds=(
        'config:If specified, output will not contain any color.'
        'pull:Sync the remote storage by downloading to local storage.'
        'push:Sync the remote storage by uploading the local storage.'
    )
    _describe -t commands "subcommand" _remote_cmds
    _arguments \
        '-no-color[If specified, output will not contain any color.]' \
}

__show() {
    _arguments \
        '-module-depth=[(n) The maximum depth to expand modules. By default this is -1, which will expand all modules.]' \
        '-no-color[If specified, output will not contain any color.]'
}

_arguments '*:: :->command'

if (( CURRENT == 1 )); then
  _describe -t commands "terraform command" _terraform_cmds
  return
fi

local -a _command_args
case "$words[1]" in
  apply)
    __apply ;;
  destroy)
    __destroy ;;
  get)
    __get ;;
  graph)
    __graph ;;
  init)
    __init ;;
  output)
    __output ;;
  plan)
    __plan ;;
  push)
    __push ;;
  refresh)
    __refresh ;;
  remote)
    __remote ;;
  show)
    __show ;;
  taint)
    __taint ;;
esac
