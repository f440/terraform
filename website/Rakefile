require "nokogiri"
require "erb"
require 'sqlite3'

class Index
  attr_accessor :db

  def initialize(path)
    @db = SQLite3::Database.new path
  end

  def drop
    @db.execute <<-SQL
      DROP TABLE IF EXISTS searchIndex
    SQL
  end

  def create
    db.execute <<-SQL
      CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT)
    SQL
    db.execute <<-SQL
      CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path)
    SQL
  end

  def reset
    drop
    create
  end

  def insert(name, type, path)
    @db.execute <<-SQL, name: name, type: type, path: path
      INSERT OR IGNORE INTO searchIndex (name, type, path)
      VALUES(:name, :type, :path)
    SQL
  end
end

task default: [:clean, :build, :setup, :copy, :create_index, :package]

task :clean do
  rm_rf "build"
  rm_rf "Terraform.docset"
end

task :build do
  sh "bundle"
  sh "bundle exec middleman build"
end

task :setup do
  mkdir_p "Terraform.docset/Contents/Resources/Documents"

  # Icon
  sh "convert -resize 16x16 source/assets/images/favicon.png Terraform.docset/icon.png"
  sh "convert -resize 32x32 source/assets/images/favicon.png Terraform.docset/icon@2x.png"
  # Info.plist
  File.open("Terraform.docset/Contents/Info.plist", "w") do |f|
    f.write <<-XML
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
    <key>CFBundleIdentifier</key>
    <string>terraform</string>
    <key>CFBundleName</key>
    <string>Terraform</string>
    <key>DocSetPlatformFamily</key>
    <string>terraform</string>
    <key>isDashDocset</key>
    <true/>
    <key>DashDocSetFamily</key>
    <string>dashtoc</string>
    <key>dashIndexFilePath</key>
    <string>docs/index.html</string>
    </dict>
    </plist>
    XML
  end
end

task :copy do
  file_list = []
  Dir.chdir("build") { file_list = Dir.glob("**/*").sort }

  file_list.each do |path|
    source = "build/#{path}"
    target = "Terraform.docset/Contents/Resources/Documents/#{path}"

    case
    when File.stat(source).directory?
      mkdir_p target
    when source.match(/\.gz$/)
      next
    when source.match(/\.html$/)
      doc = Nokogiri::HTML(File.open(source).read)

      doc.title = doc.title.sub(" - Terraform by HashiCorp", "")

      doc.xpath('//h2').each do |h2|
        a = Nokogiri::XML::Node.new "a", doc
        a["class"] = "dashAnchor"
        a["name"] = "//apple_ref/cpp/%{type}/%{name}" %
          {type: "Section", name: ERB::Util.url_encode(h2.text)}
        h2.previous = a
      end

      doc.xpath('//script').each do |script|
        if script.text != ""
          script.remove
        end
      end
      doc.xpath("id('header')").each do |e|
        e.remove
      end
      doc.xpath("//div[contains(@class, 'docs-sidebar')]").each do |e|
        e.parent.remove
      end
      doc.xpath("id('footer')").each do |e|
        e.remove
      end

      doc.xpath("//div[contains(@role, 'main')]").each do |e|
        e["style"] = "width: 100%"
      end

      File.open(target, "w") { |f| f.write doc }
    else
      cp source, target
    end
  end
end

task :create_index do
  index = Index.new("Terraform.docset/Contents/Resources/docSet.dsidx")
  index.reset

  Dir.chdir("Terraform.docset/Contents/Resources/Documents") do
    # commands
    Dir.glob("docs/commands/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Command", path
    end
    # configuration
    Dir.glob("docs/configuration/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Setting", path
    end
    # internal
    Dir.glob("docs/internals/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Protocol", path
    end
    # modules
    Dir.glob("docs/modules/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Module", path
    end
    # plugins
    Dir.glob("docs/plugins/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Plugin", path
    end
    # providers
    Dir.glob("docs/providers/**/*")
      .find_all{ |f| File.stat(f).file? }.each do |path|
      if File.basename(path, ".html") == "index"
        name = path.gsub(%r{.*providers/(.*)/index.html}, "\\1")
        name = name.gsub(/^do$/, 'digitalocean')
        index.insert name, "Provider", path
      else
        name = path.gsub(%r{.*providers/(.*)/r/(.*).html}, "\\1_\\2")
        name = name.gsub(/^do_/, 'digitalocean_')
        index.insert name, "Provider", path
      end
    end
    # provisioner
    Dir.glob("docs/provisioners/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Provisioner", path
    end
    # state
    Dir.glob("docs/state/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Instance", path
    end
    # example
    Dir.glob("intro/examples/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Sample", path
    end
    # getting-started
    Dir.glob("intro/getting-started/*") do |path|
      name = File.basename(path, ".html")
      next if name == "index"
      index.insert name, "Guide", path
    end
  end
end

task :import do
  sh "open Terraform.docset"
end

task :package do
  sh "tar --exclude='.DS_Store' -cvzf Terraform.tgz Terraform.docset"
end
